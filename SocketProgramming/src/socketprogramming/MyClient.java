/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package socketprogramming;

import AES.Cryptography;
import DiffiHelman.DiffiHelman;
import com.sun.istack.internal.Nullable;
import java.io.*;
import java.math.BigInteger;
import java.net.Socket;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JRootPane;
import javax.swing.SwingUtilities;


/**
 *
 * @author Hasan Asadi
 */
public class MyClient extends javax.swing.JFrame {
    

    /**
     * Creates new form MyClient
     */
    private final int portNumber=3422;
    private static Socket socket;
    private static DataInputStream dataInputStream;
    private static DataOutputStream dataOutputStream;
    private static String IpAddress;
    private static final String Xa="6";//Private key of client
    private static String serverPublicKey;
    private static String myPublicKey="";
    private static String sharedSecretKey;
    private static DiffiHelman diffiHelman; 
    
    private static DataInputStream in;
    private static DataOutputStream out;
    
    
    public MyClient() {
        initComponents();
//        diffiHelman=new DiffiHelman(Xa);//Xa=clientPrivateKey
//        setupClient();
    }
    

    private static void disconnect() {
        try{
//            btnConnect.setText("Connect");
            socket.close();
            dataOutputStream.close();
            dataInputStream.close();
        }catch(Exception ex){
            ex.printStackTrace();
        }
        
    }
    private static String generatePublickey(){
        //Generate public key with diffi hellman Algorithm
        if(diffiHelman!=null)
            return diffiHelman.generatePublicKey().toString();
        else
            return "";
    }
    
    private static boolean exchangePublicKey(){
        
        boolean exchangedPublicKey=false;
               
        try{
//            txtArea.setText(txtArea.getText().trim()+"exchange started");
            //Generate client's public key
            
            myPublicKey=generatePublickey();
            if(myPublicKey==null)
                myPublicKey="";
//            txtArea.setText(txtArea.getText().trim()+"Public Key Generated");
            //Send client's public key to the Server
            dataOutputStream.writeUTF(myPublicKey);
//            txtArea.setText(txtArea.getText().trim()+"\n Client public Key: ");
//            txtArea.setText(txtArea.getText().trim()+"\n Client public key:"+myPublicKey);
            System.out.println("Client public key:"+myPublicKey);
            serverPublicKey=dataInputStream.readUTF();
            System.out.println("Recieved:Server public key:"+serverPublicKey);
//            txtArea.setText(txtArea.getText().trim()+"\n Recieved:Server public key:"+serverPublicKey);
            
            exchangedPublicKey=true;
        }catch(Exception ex){
            ex.printStackTrace();
            return exchangedPublicKey;
        }
        return exchangedPublicKey;
        
    } 
    private static int exchangeSharedKey() throws IOException{
        int p=23;
        int q=5;
        int privatekey =20;
        int publickey=(int)(Math.pow(q, privatekey)%p);
        out.write(p);
        out.write(q);
        out.write(publickey);

        int publicserverkey=in.read();

        System.out.println("Modulus "+p+" sent to server:");
        System.out.println("Base "+q+" sent to server:");
        System.out.println("Private key:"+privatekey);
        System.out.println("Public Client key "+publickey+" sent to server");

        System.out.println("Public server key "+publicserverkey+" received from server");

        int key=(int)(Math.pow(publicserverkey, privatekey)%p);
        System.out.println("KEY:"+key);
        return key;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtMessage = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        lblCipherText = new javax.swing.JLabel();
        lblReceivedMessage = new javax.swing.JLabel();
        lblSockeName = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TcpClient");

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        lblCipherText.setText("Cipher Text : ");

        lblReceivedMessage.setText("Received Message :");

        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(468, 468, 468)
                        .addComponent(lblSockeName))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(100, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblCipherText)
                    .addComponent(lblReceivedMessage))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSockeName)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSend))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblCipherText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblReceivedMessage)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
       
        try{
            String msg=txtMessage.getText().trim();
            
            //encrypt Message
            
            Cryptography cryptography=new Cryptography();
            String cipherText=cryptography.encrypt(cryptography.getKey(),cryptography.getInitVector(),msg);
            lblCipherText.setText("Cipher Text: "+cipherText);
            lblReceivedMessage.setText("Received Message:");
            
            dataOutputStream.writeUTF(cipherText);
            txtMessage.setText("");
            txtArea.setText(txtArea.getText().trim()+"\n You: "+msg);
        }catch(Exception e){
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_btnSendActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MyClient().setVisible(true);
            }
            
        });
        try{
            Socket socket=new Socket("localhost",9999);
            in=new DataInputStream(socket.getInputStream());
            out=new DataOutputStream(socket.getOutputStream());
            System.out.println("Client socket created!!");
            
            int sharedKey=exchangeSharedKey();
            
            while(true) {//!str.equals("stop"
                String str=in.readUTF();
                System.out.println("C : "+str);
            }
            
//          IpAddress= java.net.InetAddress.getLocalHost().getHostAddress();
//          IpAddress="127.0.0.1";
//          lblSockeName.setText(IpAddress+":3422");
            
            //connect to Server
           
//            socket=new Socket("localhost",3422);
//            dataInputStream=new DataInputStream(socket.getInputStream());
//            dataOutputStream =new DataOutputStream(socket.getOutputStream());
//            boolean p=exchangePublicKey();
//            if(p==true){
//                sharedSecretKey=String.valueOf(diffiHelman.generateSharedKey(serverPublicKey));
//                txtArea.setText("shared Key is :"+sharedSecretKey);
//            }

            
            //Produce client's public key
            
//            disconnect();
//            String cipherMsg,plainMsg;
           /* boolean firstMessage=true;
            while(true){ //!str.equals("stop"
                cipherMsg=dataInputStream.readUTF();
//                if(firstMessage&&(!cipherMsg.equals(null)&&!cipherMsg.isEmpty())){
//                    firstMessage=false;
//                    publicKey=cipherMsg;
//                    
//                    //Produce Shared key
//                    sharedSecretKey=diffiHelman.sharedKey(publicKey).toString();
//                                            
//                    txtArea.setText(txtArea.getText().trim()+"\n Server's Public Key="+publicKey);
//                    txtArea.setText(txtArea.getText().trim()+"\n Shared Secret Key="+sharedSecretKey);
//                    
//                }
//                else if(!firstMessage&&(!cipherMsg.equals(null)&&!cipherMsg.isEmpty())){
                    Cryptography cryptography=new Cryptography();
                    plainMsg=cryptography.decrypt(cryptography.getKey(),cryptography.getInitVector(),cipherMsg);
                    lblCipherText.setText("Cipher Text:");
                    lblReceivedMessage.setText("Received Message :"+cipherMsg);
                    txtArea.setText(txtArea.getText().trim()+"\n Server: "+plainMsg);
//                } 
                
            }*/

        }
        catch(Exception ex){
            ex.printStackTrace();
        }
        
//        JRootPane rootPane = SwingUtilities.getRootPane(btnSend);
//        rootPane.setDefaultButton(btnSend);

    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton btnSend;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JLabel lblCipherText;
    private static javax.swing.JLabel lblReceivedMessage;
    private static javax.swing.JLabel lblSockeName;
    private static javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtMessage;
    // End of variables declaration//GEN-END:variables

    private void setupClient(){
        try{
//            socket=new Socket("localhost",3422);
//            dataInputStream=new DataInputStream(socket.getInputStream());
//            dataOutputStream =new DataOutputStream(socket.getOutputStream());
        }
        catch(Exception ex){
            ex.printStackTrace();
        }
        
    }

    
}
